{
    "name": "misfist/site-functionality",
    "description": "Custom plugin for WordPress project.",
    "type": "wordpress-plugin",
    "license": "GPL-2.0+-or-later",
    "authors": [
        {
            "name": "Pea",
            "email": "pea@misfist.com"
        }
    ],
    "minimum-stability": "dev",
    "prefer-stable": true,
    "config": {
        "process-timeout": 0,
        "sort-packages": true,
        "allow-plugins": {
            "composer/installers": true,
            "dealerdirect/phpcodesniffer-composer-installer": true
        },
        "optimize-autoloader": true
    },
    "autoload-dev": {
        "psr-4": {
            "Site_Functionality\\": ["tests/integration","tests/unit","tests/wpunit"]
        }
    },
    "repositories": {
        "composer/composer": {
            "type": "composer",
            "url": "https://wpackagist.org"
        },
        "wordpress/wordpress": {
            "url": "https://github.com/WordPress/wordpress-develop",
            "type": "git"
        }
    },
    "require": {
        "php": ">=7.4",
        "alleyinteractive/wordpress-autoloader": "^1.1",
        "10up/wp-content-connect": "^1.5.0"
    },
    "require-dev": {
        "10up/wp_mock": "*",
        "brianhenryie/strauss": "^0.14.0",
        "dealerdirect/phpcodesniffer-composer-installer": "*",
        "kporras07/composer-symlinks": "dev-master",
        "phpcompatibility/phpcompatibility-wp": "*",
        "squizlabs/php_codesniffer": "*",
        "wordpress/wordpress": "*",
        "wp-cli/dist-archive-command": "dev-main",
        "wp-cli/i18n-command": "^2.4",
        "wp-cli/wp-cli-bundle": "*",
        "wp-coding-standards/wpcs": "*"
    },
    "extra": {
        "strauss": {
            "namespace_prefix": "Site_Functionality\\",
            "classmap_prefix": "Site_Functionality_"
        },
        "symlinks": {
            "wp-content": "wordpress/wp-content",
            ".": "wp-content/plugins/site-functionality"
        }
    },
    "scripts": {
        "post-install-cmd": [
            "vendor/bin/strauss"
        ],
        "post-update-cmd": [
            "vendor/bin/strauss"
        ],
        "setup-wordpress": [
            "export $(grep -v '^#' .env.testing | xargs); wp config create --dbname=$TEST_SITE_DB_NAME --dbuser=$TEST_SITE_DB_USER --dbpass=$TEST_SITE_DB_PASSWORD --allow-root || true",
            "export $(grep -v '^#' .env.testing | xargs); vendor/bin/wp core install --url=\"localhost:8080/$PLUGIN_SLUG\" --title=\"$PLUGIN_NAME\" --admin_user=admin --admin_password=password --admin_email=admin@example.org || true; wp plugin activate $PLUGIN_SLUG || true;",
            "wp config set WP_DEBUG true --raw; wp config set WP_DEBUG_LOG true --raw; wp config set SCRIPT_DEBUG true --raw",
            "wp user create bob bob@example.org --user_pass=password || true;"
        ],
        "create-databases": [
            "export $(grep -v '^#' .env.testing | xargs); [[ $(mysqld --version) =~ .*MariaDB.* ]] && mysql -e \"CREATE USER IF NOT EXISTS '\"$TEST_DB_USER\"'@'%' IDENTIFIED BY '\"$TEST_DB_PASSWORD\"';\" || mysql -e \"CREATE USER IF NOT EXISTS '\"$TEST_DB_USER\"'@'%' IDENTIFIED WITH mysql_native_password BY '\"$TEST_DB_PASSWORD\"';\";",
            "export $(grep -v '^#' .env.testing | xargs); mysql -e \"CREATE DATABASE IF NOT EXISTS \"$TEST_SITE_DB_NAME\"; USE \"$TEST_SITE_DB_NAME\"; GRANT ALL PRIVILEGES ON \"$TEST_SITE_DB_NAME\".* TO '\"$TEST_DB_USER\"'@'%';\";",
            "export $(grep -v '^#' .env.testing | xargs); mysql -e \"CREATE DATABASE IF NOT EXISTS \"$TEST_DB_NAME\"; USE \"$TEST_DB_NAME\"; GRANT ALL PRIVILEGES ON \"$TEST_DB_NAME\".* TO '\"$TEST_DB_USER\"'@'%';\";",
            "@restore-acceptance-database"
        ],
        "delete-databases": [
            "export $(grep -v '^#' .env.testing | xargs); DB_DIR=$(mysql -e \"select @@datadir\" -N -B); rm -rf $DB_DIR$TEST_SITE_DB_NAME; rm -rf  $DB_DIR$TEST_DB_NAME;"
        ],
        "save-acceptance-database": [
            "export $(grep -v '^#' .env.testing | xargs); mysqldump -u $TEST_SITE_DB_USER -p$TEST_SITE_DB_PASSWORD  $TEST_SITE_DB_NAME > tests/_data/dump.sql;"
        ],
        "restore-acceptance-database": [
            "export $(grep -v '^#' .env.testing | xargs); mysql $TEST_SITE_DB_NAME < tests/_data/dump.sql"
        ],
        "coverage-tests": [
            "vendor/bin/codecept run unit --coverage unit.cov",
            "vendor/bin/codecept run wpunit --coverage wpunit.cov",
            "vendor/bin/phpcov merge --clover tests/_output/clover.xml --html tests/_output/html tests/_output;",
            "open tests/_output/html/index.html"
        ],
        "lint": [
            "vendor/bin/phpcbf || true",
            "vendor/bin/phpcs || true",
            "vendor/bin/phpstan analyse --memory-limit 1G"
        ],
        "lint-changes": [
            "updated_files=$( git status | grep 'modified:\\s.*.php$' | cut -c14- | awk '{ printf(\"%s \", $0) }' ); vendor/bin/phpcbf $(echo $updated_files); vendor/bin/phpcs $(echo $updated_files); vendor/bin/phpstan analyse $(echo $updated_files) --memory-limit 1G"
        ],
        "php-compatibility": [
            "vendor/bin/phpcs -p src templates vendor-prefixed --standard=PHPCompatibilityWP --runtime-set testVersion 7.4-"
        ],
        "create-plugin-archive": [
            "vendor/bin/wp i18n make-pot src languages/$(basename \"$PWD\").pot --domain=$(basename \"$PWD\")",
            "vendor/bin/wp dist-archive . ./dist-archive --plugin-dirname=$(basename \"$PWD\") --create-target-dir"
        ],
        "github-actions":  [
            "act -P ubuntu-latest=shivammathur/node:latest"
        ]
    }
}
